{
  "openapi": "3.0.0",
  "info": {
    "title": "API ezMESURE",
    "version": "v1",
    "description": "Use this API to interact with [ezMESURE](https://ezmesure.couperin.org).",
    "license": {
      "name": "CeCILL 2.1",
      "url": "http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.html"
    },
    "contact": {
      "email": "ezteam@couperin.org",
      "name": "ezTeam"
    }
  },
  "servers": [
    {
      "url": "/api",
      "description": "Current server"
    },
    {
      "url": "https://ezmesure.couperin.org/api",
      "description": "Production server"
    },
    {
      "url": "https://ezmesure-preprod.couperin.org/api",
      "description": "Staging server for testing"
    }
  ],
  "tags": [
    {
      "name": "Indices",
      "description": "Manage your indices"
    },
    {
      "name": "Authentication",
      "description": "Everything related to your profile"
    },
    {
      "name": "Files",
      "description": "Manage your hosted files"
    },
    {
      "name": "Metrics",
      "description": "Get metrics from indices"
    },
    {
      "name": "Institutions",
      "description": "Manage institutions"
    },
    {
      "name": "Basics"
    },
    {
      "name": "Sushi"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Access token is missing or invalid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ForbiddenError": {
        "description": "Action is forbidden for the authenticated user",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Authentication Error",
            "description": "The error message"
          }
        }
      },
      "User": {
        "type": "object",
        "description": "",
        "properties": {
          "username": {
            "type": "string",
            "example": "john.doo"
          },
          "roles": {
            "type": "array",
            "example": [
              "kibana_user",
              "univ-foobar"
            ],
            "uniqueItems": true,
            "items": {
              "type": "string",
              "example": "bibcnrs"
            }
          },
          "full_name": {
            "type": "string",
            "example": "John Doo"
          },
          "email": {
            "type": "string",
            "example": "doo.john@ezpaarse.org",
            "format": "email"
          },
          "enabled": {
            "type": "boolean"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "createdAt": {
                "type": "string",
                "example": "2018-04-12T13:33:00.930Z",
                "format": "date-time"
              },
              "updatedAt": {
                "type": "string",
                "example": "2018-05-15T03:23:43.391Z",
                "format": "date-time"
              },
              "remoteUser": {
                "type": "string",
                "example": "doo.john.6"
              },
              "persistentId": {
                "type": "string",
                "example": "https://ezpaarse.org/idp!https://ezmesure.couperin.org/sp!XJ3AGRS5J74DD6PMGS7UD4M5UOGIWQPN"
              },
              "uid": {
                "type": "string",
                "example": "doo.john.6"
              },
              "unit": {
                "type": "string",
                "example": "PL123"
              },
              "idp": {
                "type": "string",
                "example": "https://ezpaarse.org/idp"
              },
              "org": {
                "type": "string",
                "example": "EZPAARSE"
              },
              "affiliation": {
                "type": "string",
                "example": "employee@ezpaarse.org"
              },
              "acceptedTerms": {
                "type": "boolean",
                "example": true
              },
              "eppn": {
                "type": "string",
                "example": "doo.john.6@ezpaarse.org"
              }
            }
          }
        }
      },
      "Institution": {
        "description": "",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Institution identifier",
            "example": "496ccfa0-1f73-11eb-a8a0-4f0bd0a37c79",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Institution name",
            "example": "University of Foobar"
          },
          "acronym": {
            "type": "string",
            "example": "UFO",
            "description": "Institution acronym"
          },
          "website": {
            "type": "string",
            "description": "URL of the institution website",
            "example": "http://univ-foobar.fr",
            "format": "uri"
          },
          "city": {
            "type": "string",
            "description": "City of the institution",
            "example": "Paris"
          },
          "type": {
            "type": "string"
          },
          "domains": {
            "type": "array",
            "description": "Domains owned by the institution",
            "items": {
              "type": "string",
              "example": "univ-foobar.fr"
            }
          },
          "indexPrefix": {
            "type": "string",
            "example": "univ-foobar",
            "description": "The index prefix allocated to the institution"
          },
          "space": {
            "type": "string",
            "example": "univ-foobar",
            "description": "ID of the space allocated to the institution"
          },
          "role": {
            "type": "string",
            "example": "univ-foobar",
            "description": "Role associated to the institution. Users with this role are considered members."
          },
          "uai": {
            "type": "string",
            "example": "0362917P",
            "description": "UAI (Unité Administrative Immatriculée) of the institution"
          },
          "creator": {
            "type": "string",
            "nullable": true,
            "description": "Username of the user that declared the institution. Removed once the institution is validated.",
            "example": "john.doe"
          },
          "validated": {
            "type": "boolean",
            "description": "True when the institution has been validated"
          },
          "indexCount": {
            "type": "number",
            "example": 1876124,
            "description": "Total number of documents under the institution prefix"
          },
          "logoId": {
            "type": "string",
            "nullable": true,
            "description": "Identifier of the institution logo image",
            "example": "32a1c269738c43463312f09821b22323.png"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2020-11-05T14:29:17.849Z",
            "description": "Datetime of the latest institution update"
          },
          "createdAt": {
            "type": "string",
            "example": "2020-11-05T14:29:17.849Z",
            "format": "date-time",
            "description": "Datetime of the institution creation"
          },
          "auto": {
            "type": "object",
            "properties": {
              "ezpaarse": {
                "type": "boolean",
                "description": "True if the institution has automated log processing with ezPAARSE"
              },
              "ezmesure": {
                "type": "boolean",
                "description": "True if the institution has automated consultations' deposit into ezMESURE"
              },
              "report": {
                "type": "boolean",
                "description": "True if the institution has an automatic report setup on ezMESURE"
              }
            }
          }
        },
        "required": [
          "id"
        ]
      },
      "InstitutionsRefresh": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "boolean",
            "description": "true if one or more institutions failed to refresh"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "University of Foobar",
                  "description": "name of the institution"
                },
                "indexPrefix": {
                  "type": "string",
                  "example": "univ-foobar",
                  "description": "index prefix of the institution"
                },
                "indexCount": {
                  "type": "integer",
                  "example": 8542,
                  "description": "total number of documents stored under the index prefix"
                },
                "docContactName": {
                  "type": "string",
                  "example": "John Doe",
                  "description": "name of the documentary contact"
                },
                "techContactName": {
                  "type": "string",
                  "example": "John Doe",
                  "description": "name of the technical contact"
                },
                "updated": {
                  "type": "boolean",
                  "description": "true is something changed"
                },
                "error": {
                  "type": "string",
                  "description": "an error message if refresh failed"
                }
              }
            }
          }
        }
      },
      "IndexList": {
        "type": "object",
        "properties": {
          "_shards": {
            "type": "object",
            "properties": {
              "total": {
                "type": "integer"
              },
              "successful": {
                "type": "integer"
              },
              "failed": {
                "type": "integer"
              }
            }
          },
          "_all": {
            "type": "object",
            "properties": {
              "primaries": {
                "type": "object",
                "properties": {
                  "docs": {
                    "type": "object",
                    "properties": {
                      "count": {
                        "type": "integer"
                      },
                      "deleted": {
                        "type": "integer"
                      }
                    }
                  }
                }
              },
              "total": {
                "type": "object",
                "properties": {
                  "docs": {
                    "type": "object",
                    "properties": {
                      "count": {
                        "type": "integer"
                      },
                      "deleted": {
                        "type": "integer"
                      }
                    }
                  }
                }
              }
            }
          },
          "indices": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "primaries": {
                  "type": "object",
                  "properties": {
                    "docs": {
                      "type": "object",
                      "properties": {
                        "count": {
                          "type": "integer"
                        },
                        "deleted": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                },
                "total": {
                  "type": "object",
                  "properties": {
                    "docs": {
                      "type": "object",
                      "properties": {
                        "count": {
                          "type": "integer"
                        },
                        "deleted": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "IndexInsert": {
        "type": "object",
        "properties": {
          "took": {
            "type": "integer",
            "description": "Response time in ms"
          },
          "total": {
            "type": "integer",
            "description": "Total number of consultations received"
          },
          "inserted": {
            "type": "integer",
            "description": "Number of inserted consultations"
          },
          "updated": {
            "type": "integer",
            "description": "Number of updated consultations"
          },
          "failed": {
            "type": "integer",
            "description": "Number of consultations that failed to be inserted"
          },
          "errors": {
            "type": "array",
            "description": "First error messages from consultations that failed to be inserted",
            "items": {
              "type": "string",
              "example": "log_id is missing"
            }
          }
        }
      },
      "IndexRemove": {
        "type": "object",
        "properties": {
          "took": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          },
          "deleted": {
            "type": "integer"
          },
          "batches": {
            "type": "integer"
          },
          "timed_out": {
            "type": "boolean"
          },
          "version_conflicts": {
            "type": "integer"
          },
          "noops": {
            "type": "integer"
          },
          "throttled_millis": {
            "type": "integer"
          },
          "requests_per_second": {
            "type": "integer"
          },
          "throttled_until_millis": {
            "type": "integer"
          },
          "retries": {
            "type": "object",
            "properties": {
              "bulk": {
                "type": "integer"
              },
              "search": {
                "type": "integer"
              }
            }
          },
          "failures": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Metrics": {
        "type": "object",
        "x-examples": {},
        "properties": {
          "took": {
            "type": "integer",
            "example": 280,
            "description": "response time in ms"
          },
          "docs": {
            "type": "integer",
            "example": 1000,
            "description": "total number of documents"
          },
          "dateCoverage": {
            "type": "object",
            "properties": {
              "min": {
                "type": "integer",
                "description": "minimum date covered by the documents"
              },
              "max": {
                "type": "integer",
                "description": "maximum date covered by the documents"
              }
            }
          },
          "metrics": {
            "type": "object",
            "properties": {
              "days": {
                "type": "integer",
                "description": "number of days covered by all documents"
              },
              "titles": {
                "type": "integer",
                "description": "number of different publication titles"
              },
              "platforms": {
                "type": "integer",
                "description": "number of different platforms"
              },
              "indices": {
                "type": "integer",
                "description": "number of indices"
              }
            }
          }
        }
      },
      "FileList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "example": "ezproxy.2020.07.01.ec.csv",
              "description": "File name"
            },
            "size": {
              "type": "integer",
              "example": 1342632,
              "description": "File size in bytes"
            },
            "createdAt": {
              "type": "string",
              "example": "2020-11-05T16:15:27.929Z",
              "format": "date-time",
              "description": "File creation date"
            },
            "lastModified": {
              "type": "string",
              "example": "2020-11-05T16:15:27.929Z",
              "format": "date-time",
              "description": "File modification date"
            }
          }
        }
      },
      "Sushi": {
        "description": "",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "645c4000-1f89-11eb-836f-a3005ccf2dc6",
            "description": "ID of the sushi item"
          },
          "vendor": {
            "type": "string",
            "minLength": 1,
            "example": "Akademiai Kiado",
            "description": "Vendor name"
          },
          "sushiUrl": {
            "type": "string",
            "format": "uri",
            "example": "https://journals.com/rest/COUNTER/v5/reports",
            "description": "URL of the Sushi endpoint"
          },
          "requestorId": {
            "type": "string"
          },
          "customerId": {
            "type": "string"
          },
          "apiKey": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "package": {
            "type": "string",
            "description": "ezMESURE package ID"
          },
          "institutionId": {
            "type": "string",
            "example": "f438c3f0-152b-11eb-8113-ff14fcf1fe5b",
            "format": "uuid",
            "description": "ID of the institution that owns the sushi item"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2020-11-05T17:07:31.967Z",
            "description": "Last modification of the sushi item"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2020-11-05T17:07:31.967Z",
            "description": "Creation date of the sushi item"
          }
        },
        "required": [
          "id",
          "vendor",
          "sushiUrl",
          "package",
          "institutionId",
          "updatedAt",
          "createdAt"
        ]
      },
      "SushiPlatform": {
        "description": "",
        "type": "object",
        "properties": {
          "vendor": {
            "type": "string",
            "minLength": 1,
            "description": "Vendor name"
          },
          "sushiUrl": {
            "type": "string",
            "minLength": 1,
            "description": "URL of the sushi endpoint"
          },
          "customerId": {
            "type": "boolean",
            "description": "Whether the sushi endpoint needs a customer ID"
          },
          "requestorId": {
            "type": "boolean",
            "description": "Whether the sushi endpoint needs a requestor ID"
          },
          "apiKey": {
            "type": "boolean",
            "description": "Whether the sushi endpoint needs an API key"
          },
          "description": {
            "type": "string",
            "description": "Vendor description"
          },
          "isNonSushi": {
            "type": "boolean"
          },
          "companies": {
            "type": "string"
          }
        },
        "required": [
          "vendor",
          "sushiUrl",
          "customerId",
          "requestorId",
          "apiKey"
        ],
        "x-examples": {
          "example-1": {
            "vendor": "Fictive Journals",
            "sushiUrl": "https://journals.fictive.com/sushi/reports",
            "customerId": true,
            "requestorId": false,
            "apiKey": true,
            "description": "This is a fictive sushi endpoint",
            "isNonSushi": false,
            "companies": "Atypon"
          }
        }
      }
    }
  },
  "paths": {
    "/": {
      "get": {
        "summary": "Ping the API",
        "description": "This route is currently only used to send a ping to the API.",
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                },
                "examples": {
                  "example-1": {
                    "value": "OK"
                  }
                }
              }
            }
          }
        },
        "operationId": "ping",
        "tags": [
          "Basics"
        ]
      }
    },
    "/profile": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Fetch profile",
        "description": "Get the profile associated with the JWT token.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "operationId": "getProfile"
      }
    },
    "/profile/token": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get an authorization token",
        "description": "Actually requires a JWT token (typically stored in cookies). This route provides you with a token from the user space.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Token generated successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImpvaG4uZG9lIiwiZW1haWwiOiJkb28uam9obkB1bml2ZXJzZS5vcmciLCJpYXQiOjE1MTYyMzkwMjJ9.QsXZLquqEZY4q0XhDEvbEm_LzYEuPToboyUZFZrQSbE"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "operationId": "getAuthToken"
      }
    },
    "/profile/terms/accept": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Accept terms of service",
        "description": "Accept terms of service. You should read them first!",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Terms accepted successfully"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "operationId": "acceptTerms"
      }
    },
    "/profile/password/reset": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Reset Kibana password",
        "description": "Reset Kibana password of the authenticated user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Password successfully reset"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "operationId": "resetPassword"
      }
    },
    "/logs": {
      "get": {
        "tags": [
          "Indices"
        ],
        "summary": "List existing indices",
        "description": "List the existing indices you are allowed to see.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "operationId": "getLogs"
      }
    },
    "/logs/{index}": {
      "post": {
        "tags": [
          "Indices"
        ],
        "summary": "Insert data into an index",
        "description": "Insert access events into an index.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "index",
            "schema": {
              "type": "string",
              "example": "univ-foobar"
            },
            "description": "the index where the data should be inserted",
            "required": true
          },
          {
            "in": "header",
            "name": "Split-Fields",
            "schema": {
              "type": "string",
              "pattern": "^([^()]+?\\([^()]+?\\))+$"
            },
            "description": "a list of multivalued fields, formatted as __\"fieldname(delimitor)\"__, and separated with whitespaces. Example: __\"ezproxy-groups(+) subjects(,)\"__"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "examples": {}
            },
            "text/csv": {
              "schema": {
                "type": "object",
                "example": {
                  "datetime": "2018-03-22T11:37:42+02:00",
                  "platform": "npg",
                  "rtype": "ARTICLE",
                  "mime": "HTML",
                  "domain": "www.nature.com",
                  "title_id": "41564",
                  "log_id": "d5d680b88def9bc4b41d4b94f22d60514e54689e",
                  "url": "https://www.nature.com/articles/s41564-018-0156-0",
                  "status": "200",
                  "doi": ""
                },
                "properties": {
                  "datetime": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "log_id": {
                    "type": "string"
                  },
                  "rtype": {
                    "type": "string",
                    "nullable": true
                  },
                  "mime": {
                    "type": "string",
                    "nullable": true
                  },
                  "doi": {
                    "type": "string",
                    "nullable": true
                  },
                  "title_id": {
                    "type": "string"
                  },
                  "url": {
                    "type": "string",
                    "format": "uri"
                  },
                  "status": {
                    "type": "string"
                  },
                  "domain": {
                    "type": "string"
                  },
                  "publication_title": {
                    "type": "string"
                  }
                },
                "required": [
                  "datetime",
                  "log_id",
                  "rtype",
                  "mime",
                  "doi",
                  "title_id"
                ]
              }
            }
          },
          "description": ""
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexInsert"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        },
        "operationId": "insertLogs"
      }
    },
    "/logs/{index}/events": {
      "delete": {
        "tags": [
          "Indices"
        ],
        "summary": "Remove data from an index",
        "description": "Remove access events from an index. Defaults to everything if no condition provided.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "index",
            "schema": {
              "type": "string",
              "example": "univ-foobar"
            },
            "description": "the index where the data should be removed",
            "required": true
          },
          {
            "in": "query",
            "name": "from",
            "schema": {
              "type": "string"
            },
            "example": "2018-01-24T12:00:00",
            "description": "Earliest date of the events that should be removed. Can be either a date or datetime in ISO format."
          },
          {
            "in": "query",
            "name": "to",
            "schema": {
              "type": "string"
            },
            "example": "2018-01-25T12:00:00",
            "description": "Latest date of the events that should be removed. Can be either a date or datetime in ISO format."
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexRemove"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        },
        "operationId": "deleteEvents"
      }
    },
    "/logs/{index}/tops": {
      "get": {
        "tags": [
          "Indices"
        ],
        "summary": "Get top metrics for an index",
        "description": "Get top metrics for an index.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "index",
            "schema": {
              "type": "string",
              "example": "univ-foobar"
            },
            "description": "The index to get tops from.",
            "required": true
          },
          {
            "in": "query",
            "name": "period",
            "description": "The time span covered.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "today",
                "yesterday",
                "current_week",
                "last_week",
                "current_month",
                "last_month",
                "current_year",
                "last_year",
                "all"
              ]
            }
          },
          {
            "in": "query",
            "name": "size",
            "description": "The size of the tops.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metrics"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "operationId": "topLogs"
      }
    },
    "/logs/{index}/search": {
      "post": {
        "tags": [
          "Indices"
        ],
        "summary": "Search in indices",
        "description": "Perform search in indices using Elasticsearch Search API.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "externalDocs": {
          "description": "More about Elasticsearch Query DSL and aggregations can be found on",
          "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html"
        },
        "parameters": [
          {
            "in": "path",
            "name": "index",
            "schema": {
              "type": "string",
              "example": "univ-foobar"
            },
            "description": "the index to search",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Elasticsearch query",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "size": 0,
                  "query": {
                    "term": {
                      "platform": "npg"
                    }
                  },
                  "aggs": {
                    "rtypes": {
                      "terms": {
                        "field": "rtype",
                        "size": 5
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Raw response as returned by Elasticsearch"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "operationId": "searchLogs"
      }
    },
    "/logs/{index}/aggregation.{extension}": {
      "get": {
        "tags": [
          "Indices"
        ],
        "summary": "Export all aggregated combinations of the given fields",
        "description": "Export all aggregated combinations of the given fields",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "index",
            "schema": {
              "type": "string",
              "example": "univ-foobar"
            },
            "description": "The index that contains the consultations to be aggregated",
            "required": true
          },
          {
            "in": "path",
            "name": "extension",
            "schema": {
              "type": "string",
              "enum": [
                "csv",
                "ndjson"
              ]
            },
            "description": "The export format",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "description": "Comma-separated list of fields that should be aggregated",
            "schema": {
              "type": "string",
              "example": "rtype,mime"
            }
          },
          {
            "in": "query",
            "name": "missing",
            "description": "Include combinations with missing values",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "in": "query",
            "name": "from",
            "description": "Start date of the period to be aggregated",
            "schema": {
              "type": "string",
              "example": "2020-01-01"
            }
          },
          {
            "in": "query",
            "name": "to",
            "description": "End date of the period to be aggregated",
            "schema": {
              "type": "string",
              "example": "2020-12-31"
            }
          },
          {
            "in": "query",
            "name": "filter",
            "description": "A list of filters in O-Rison format, that should be applied before performing the aggregation",
            "schema": {
              "type": "string"
            },
            "examples": {
              "simple": {
                "value": "platform:wiley,status:200",
                "summary": "Single value",
                "description": "Filter a single value by specifying a field and a value. Strings containing spaces should be surrounded by simple quotes `'`."
              },
              "multiple": {
                "value": "platform:!(wiley,cairn),status:!(200,304)",
                "summary": "Multiple values",
                "description": "Filter multiple values by placing them inside `!( )`."
              },
              "range": {
                "value": "status:(gte:200,lt:400)",
                "summary": "Numeric range",
                "description": "Filter a numeric range by using `gt`/`gte`/`lt`/`lte` inside `( )`."
              },
              "negate": {
                "value": "platform:(not:wiley)",
                "summary": "Negate filter",
                "description": "Negate a filter by placing it inside `(not: )`"
              }
            }
          },
          {
            "in": "query",
            "name": "delimiter",
            "description": "Delimiter for the CSV output. Use `tab` to get tab-seperated values.",
            "schema": {
              "type": "string",
              "example": ","
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/x-ndjson": {
                "examples": {
                  "example-1": {
                    "value": "{ \"key\": { \"rtype\": \"ARTICLE\", \"mime\": \"PDF\" }, \"doc_count\": 42 }\n{ \"key\": { \"rtype\": \"ARTICLE\", \"mime\": \"HTML\" }, \"doc_count\": 17 }"
                  }
                },
                "schema": {
                  "type": "string"
                }
              },
              "text/csv": {
                "example": "doc_count;rtype;mime\n42;ARTICLE;PDF\n17;ARTICLE;HTML"
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        },
        "operationId": "aggregateLogs"
      }
    },
    "/logs/{index}/counterize": {
      "post": {
        "tags": [
          "Indices"
        ],
        "summary": "Export aggregated COUNTER metrics into another index",
        "description": "Export aggregated COUNTER metrics into another index",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "index",
            "schema": {
              "type": "string",
              "example": "univ-foobar"
            },
            "description": "the index that contains the consultations to be aggregated",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "destination"
                ],
                "properties": {
                  "destination": {
                    "type": "string",
                    "description": "The index where aggregations should be stored",
                    "example": "univ-foobar-counter5"
                  },
                  "from": {
                    "type": "string",
                    "example": "2020-01"
                  },
                  "to": {
                    "type": "string",
                    "example": "2020-04"
                  },
                  "platform": {
                    "type": "string",
                    "description": "filter aggregations for a specific platform",
                    "example": "wiley"
                  },
                  "sessionField": {
                    "type": "string",
                    "description": "The field that holds the session ID, for unique request/investigation counting",
                    "example": "ezproxy-session"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexInsert"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        },
        "operationId": "counterizeLogs"
      }
    },
    "/files": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "List your hosted files",
        "description": "List your hosted files.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "operationId": "getFiles"
      }
    },
    "/files/{filename}": {
      "delete": {
        "tags": [
          "Files"
        ],
        "summary": "Remove one file from your hosted files",
        "description": "Remove one file from your hosted files.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "filename",
            "schema": {
              "type": "string",
              "example": "univ-foobar_2017-08-17.csv"
            },
            "description": "The file to be removed.",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "File successfully removed"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "operationId": "deleteFile"
      }
    },
    "/files/delete_batch": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Remove a list of files from your hosted files",
        "description": "Remove a list of files from your hosted files.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "entries": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "univ-foobar_2017-08-17.csv"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "List of files successfully removed"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "operationId": "deleteMultipleFiles"
      }
    },
    "/metrics": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "summary": "Get general metrics",
        "description": "Get general metrics about the data hosted on ezMESURE.",
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metrics"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "operationId": "getMetrics"
      }
    },
    "/partners": {
      "get": {
        "tags": [
          "Institutions"
        ],
        "summary": "Get partners",
        "description": "Get the list of validated institutions.",
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Institution"
                  }
                }
              }
            }
          }
        },
        "operationId": "getInstitutions"
      }
    },
    "/institutions/_refresh": {
      "post": {
        "tags": [
          "Institutions"
        ],
        "summary": "Refresh institutions",
        "description": "Refresh dynamic institution fields (contacts, number of ECs).",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstitutionsRefresh"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "operationId": "refreshInstitutions"
      }
    },
    "/institutions/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get an institution",
        "tags": [
          "Institutions"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Institution"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "operationId": "get-institutions-id",
        "description": "Get an institution by ID. Use 'self' to get the institution of the authenticated user.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete an institution",
        "operationId": "delete-institutions-id",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "description": "Delete an institution.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Institutions"
        ]
      },
      "put": {
        "summary": "Update an institution",
        "operationId": "put-institutions-id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Institution"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Update an institution",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Institution"
              }
            }
          }
        },
        "tags": [
          "Institutions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/institutions": {
      "get": {
        "summary": "Get institutions",
        "tags": [
          "Institutions"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Institution"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "operationId": "get-institutions",
        "description": "Get all institutions",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create an institution",
        "operationId": "post-institutions",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Institution"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "description": "Create an institution",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Institution"
              }
            }
          }
        },
        "tags": [
          "Institutions"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/institutions/{id}/validated": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "put": {
        "summary": "Change validation state of an institution",
        "operationId": "put-institutions-id-validated",
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Change validation state of an institution",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "value"
                ]
              }
            }
          }
        },
        "tags": [
          "Institutions"
        ]
      }
    },
    "/institutions/{id}/sushi": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Sushi items of an institution",
        "tags": [
          "Institutions",
          "Sushi"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Sushi"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "operationId": "get-institutions-id-sushi",
        "description": "Get Sushi items of an institution.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/institutions/delete": {
      "post": {
        "summary": "Delete multiple institutions",
        "operationId": "post-institutions-delete",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "status": {
                        "type": "string",
                        "enum": [
                          "deleted",
                          "failed"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "description": "Delete multiple institutions at once.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Institutions"
        ]
      }
    },
    "/institutions/{id}/_refresh": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Refresh an institution",
        "operationId": "post-institutions-id-_refresh",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Institution"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "tags": [
          "Institutions"
        ],
        "description": "Refresh dynamic fields (contacts, number of ECs) of a specific institution.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sushi": {
      "get": {
        "summary": "Get all Sushi items",
        "tags": [
          "Sushi"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Sushi"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "operationId": "get-sushi",
        "description": "Get all Sushi items",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "summary": "Create a Sushi item",
        "operationId": "post-sushi",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sushi"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "description": "Add a new Sushi item",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Sushi"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Sushi"
              }
            }
          }
        }
      }
    },
    "/sushi/platforms.json": {
      "get": {
        "summary": "Get known Sushi endpoints",
        "tags": [
          "Sushi"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SushiPlatform"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "operationId": "get-sushi-platforms.json",
        "description": "Get the list of known platforms that have sushi endpoints",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/sushi/batch_delete": {
      "post": {
        "summary": "Delete multiple Sushi items",
        "operationId": "post-sushi-batch_delete",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "status": {
                        "type": "string",
                        "enum": [
                          "failed",
                          "deleted"
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Sushi"
        ],
        "description": "Delete multiple Sushi items at once",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ids": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/sushi/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ],
      "patch": {
        "summary": "Update a Sushi item",
        "operationId": "patch-sushi-id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sushi"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "tags": [
          "Sushi"
        ],
        "description": "Update a Sushi item",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Sushi"
              }
            }
          }
        }
      }
    }
  }
}