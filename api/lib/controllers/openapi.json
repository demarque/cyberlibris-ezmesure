{
  "openapi": "3.0.0",
  "info": {
    "title": "API ezMESURE",
    "version": "v1",
    "description": "Use this API to interact with [ezMESURE](https://ezmesure.couperin.org).",
    "license": {
      "name": "CeCILL 2.1",
      "url": "http://www.cecill.info/licences/Licence_CeCILL_V2.1-en.html"
    }
  },
  "servers": [
    {
      "url": "https://ezmesure.couperin.org/api",
      "description": "Production server"
    },
    {
      "url": "https://ezmesure-preprod.couperin.org/api",
      "description": "Staging server for testing"
    }
  ],
  "tags": [
    {
      "name": "Indices",
      "description": "Manage your indices"
    },
    {
      "name": "Authentication",
      "description": "Everything related to your profile"
    },
    {
      "name": "Files",
      "description": "Manage your hosted files"
    },
    {
      "name": "Metrics",
      "description": "Get metrics from indices"
    },
    {
      "name": "Depositors",
      "description": "Manage depositors"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Access token is missing or invalid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "ForbiddenError": {
        "description": "Action is forbidden for the authenticated user",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      }
    },
    "schemas": {
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Authentication Error"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "example": "john.doo"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "kibana_user",
              "univ-foobar"
            ]
          },
          "full_name": {
            "type": "string",
            "example": "John Doo"
          },
          "email": {
            "type": "string",
            "example": "doo.john@ezpaarse.org"
          },
          "enabled": {
            "type": "boolean"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "createdAt": {
                "type": "string",
                "example": "2018-04-12T13:33:00.930Z"
              },
              "updatedAt": {
                "type": "string",
                "example": "2018-05-15T03:23:43.391Z"
              },
              "remoteUser": {
                "type": "string",
                "example": "doo.john.6"
              },
              "persistentId": {
                "type": "string",
                "example": "https://ezpaarse.org/idp!https://ezmesure.couperin.org/sp!XJ3AGRS5J74DD6PMGS7UD4M5UOGIWQPN"
              },
              "uid": {
                "type": "string",
                "example": "doo.john.6"
              },
              "unit": {
                "type": "string",
                "example": "PL123"
              },
              "idp": {
                "type": "string",
                "example": "https://ezpaarse.org/idp"
              },
              "org": {
                "type": "string",
                "example": "EZPAARSE"
              },
              "affiliation": {
                "type": "string",
                "example": "employee@ezpaarse.org"
              },
              "acceptedTerms": {
                "type": "boolean",
                "example": true
              },
              "eppn": {
                "type": "string",
                "example": "doo.john.6@ezpaarse.org"
              }
            }
          }
        }
      },
      "Depositors": {
        "type": "object",
        "properties": {
          "index": {
            "type": "object",
            "properties": {
              "prefix": {
                "type": "string",
                "example": "univ-foobar"
              },
              "count": {
                "type": "integer",
                "example": "8542"
              }
            }
          },
          "organisation": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "University of Foobar"
              },
              "label": {
                "type": "string",
                "example": "University of Foobar"
              },
              "city": {
                "type": "string",
                "example": "Paris"
              },
              "logoUrl": {
                "type": "string",
                "example": "https://foobar.univ.fr/assets/logo.jpg"
              },
              "uai": {
                "type": "string",
                "example": "0362917P"
              }
            }
          },
          "contact": {
            "type": "object",
            "properties": {
              "confirmed": {
                "type": "boolean"
              },
              "tech": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "example": "John"
                  },
                  "lastName": {
                    "type": "string",
                    "example": "Doo"
                  },
                  "mail": {
                    "type": "string",
                    "example": "john.doo@univ-foo.fr"
                  }
                }
              },
              "doc": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "example": "John"
                  },
                  "lastName": {
                    "type": "string",
                    "example": "Doo"
                  },
                  "mail": {
                    "type": "string",
                    "example": "john.doo@univ-foo.fr"
                  }
                }
              }
            }
          },
          "auto": {
            "type": "object",
            "properties": {
              "ezmesure": { "type": "boolean" },
              "ezpaarse": { "type": "boolean" },
              "report": { "type": "boolean" }
            }
          },
          "location": {
            "type": "object",
            "properties": {
              "lon": { "type": "number" },
              "lar": { "type": "number" }
            }
          }
        }
      },
      "DepositorsRefresh": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "boolean"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "University of Foobar"
                },
                "prefix": {
                  "type": "string",
                  "example": "univ-foobar"
                },
                "count": {
                  "type": "integer",
                  "example": 8542
                },
                "result": {
                  "type": "string",
                  "example": "created"
                }
              }

            }
          }
        }
      },
      "IndexList": {
        "type": "object",
        "properties": {
          "_shards": {
            "type": "object",
            "properties": {
              "total": { "type": "integer" },
              "successful": { "type": "integer" },
              "failed": { "type": "integer" }
            }
          },
          "_all": {
            "type": "object",
            "properties": {
              "primaries": {
                "type": "object",
                "properties": {
                  "docs": {
                    "type": "object",
                    "properties": {
                      "count": { "type": "integer" },
                      "deleted": { "type": "integer" }
                    }
                  }
                }
              },
              "total": {
                "type": "object",
                "properties": {
                  "docs": {
                    "type": "object",
                    "properties": {
                      "count": { "type": "integer" },
                      "deleted": { "type": "integer" }
                    }
                  }
                }
              }
            }
          },
          "indices": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "primaries": {
                  "type": "object",
                  "properties": {
                    "docs": {
                      "type": "object",
                      "properties": {
                        "count": { "type": "integer" },
                        "deleted": { "type": "integer" }
                      }
                    }
                  }
                },
                "total": {
                  "type": "object",
                  "properties": {
                    "docs": {
                      "type": "object",
                      "properties": {
                        "count": { "type": "integer" },
                        "deleted": { "type": "integer" }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "IndexInsert": {
        "type": "object",
        "properties": {
          "took": { "type": "integer" },
          "total": { "type": "integer" },
          "inserted": { "type": "integer" },
          "updated": { "type": "integer" },
          "failed": { "type": "integer" },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IndexRemove": {
        "type": "object",
        "properties": {
          "took": { "type": "integer" },
          "total": { "type": "integer" },
          "deleted": { "type": "integer" },
          "batches": { "type": "integer" },
          "timed_out": { "type": "boolean" },
          "version_conflicts": { "type": "integer" },
          "noops": { "type": "integer" },
          "throttled_millis": { "type": "integer" },
          "requests_per_second": { "type": "integer" },
          "throttled_until_millis": { "type": "integer" },
          "retries": {
            "type": "object",
            "properties": {
              "bulk": { "type": "integer" },
              "search": { "type": "integer" }
            }
          },
          "failures": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Metrics": {
        "type": "object",
        "properties": {
          "took": { "type": "integer" },
          "docs": { "type": "integer" },
          "dateCoverage": {
            "type": "object",
            "properties": {
              "min": { "type": "integer" },
              "max": { "type": "integer" }
            }
          },
          "metrics": {
            "type": "object",
            "properties": {
              "days": { "type": "integer" },
              "titles": { "type": "integer" },
              "platforms": { "type": "integer" },
              "indices": { "type": "integer" }
            }
          }
        }
      },
      "FileList": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": { "type": "string" },
            "size": { "type": "integer" },
            "createdAt": { "type": "integer" },
            "lastModified": { "type": "integer" }
          }
        }
      }
    }
  },
  "paths": {
    "/": {
      "get": {
        "summary": "Ping the API",
        "description": "This route is currently only used to send a ping to the API.",
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "OK"
                }
              }
            }
          }
        }
      }
    },
    "/profile": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Fetch profile",
        "description": "Get the profile associated with the JWT token.",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/profile/token": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get an authorization token",
        "description": "Actually requires a JWT token (typically stored in cookies). This route provides you with a token from the user space.",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "Token generated successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImpvaG4uZG9lIiwiZW1haWwiOiJkb28uam9obkB1bml2ZXJzZS5vcmciLCJpYXQiOjE1MTYyMzkwMjJ9.QsXZLquqEZY4q0XhDEvbEm_LzYEuPToboyUZFZrQSbE"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/profile/terms/accept": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Accept terms of service",
        "description": "Accept terms of service. You should read them first!",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "204": {
            "description": "Terms accepted successfully"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/profile/password/reset": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Reset Kibana password",
        "description": "Reset Kibana password of the authenticated user.",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "204": {
            "description": "Password successfully reset"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/logs": {
      "get": {
        "tags": [
          "Indices"
        ],
        "summary": "List existing indices",
        "description": "List the existing indices you are allowed to see.",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/logs/{index}": {
      "post": {
        "tags": [
          "Indices"
        ],
        "summary": "Insert data into an index",
        "description": "Insert access events into an index.",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "index",
            "schema": {
              "type": "string",
              "example": "univ-foobar"
            },
            "description": "the index where the data should be inserted",
            "required": true
          },
          {
            "in": "header",
            "name": "Split-Fields",
            "schema": {
              "type": "string",
              "pattern": "^([^()]+?\\([^()]+?\\))+$"
            },
            "description": "a list of multivalued fields, formatted as __\"fieldname(delimitor)\"__, and separated with whitespaces. Example: __\"ezproxy-groups(+) subjects(,)\"__"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            },
            "text/csv": {
              "schema": {
                "type": "object",
                "required": [
                  "datetime",
                  "log_id",
                  "rtype",
                  "mime",
                  "title_id",
                  "doi"
                ],
                "properties": {
                  "datetime": { "type": "string" },
                  "log_id": { "type": "string" },
                  "rtype": { "type": "string", "nullable": true },
                  "mime": { "type": "string", "nullable": true },
                  "title_id": { "type": "string", "nullable": true },
                  "doi": { "type": "string", "nullable": true }
                },
                "additionalProperties": {
                  "type": "string"
                },
                "example": {
                  "datetime": "2018-03-22T11:37:42+02:00",
                  "platform": "npg",
                  "rtype": "ARTICLE",
                  "mime": "HTML",
                  "domain": "www.nature.com",
                  "log_id": "d5d680b88def9bc4b41d4b94f22d60514e54689e",
                  "url": "https://www.nature.com/articles/s41564-018-0156-0",
                  "status": "200"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexInsert"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      }
    },
    "/logs/{index}/events": {
      "delete": {
        "tags": [
          "Indices"
        ],
        "summary": "Remove data from an index",
        "description": "Remove access events from an index. Defaults to everything if no condition provided.",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "index",
            "schema": {
              "type": "string",
              "example": "univ-foobar"
            },
            "description": "the index where the data should be removed",
            "required": true
          },
          {
            "in": "query",
            "name": "from",
            "schema": {
              "type": "string"
            },
            "example": "2018-01-24T12:00:00",
            "description": "Earliest date of the events that should be removed. Can be either a date or datetime in ISO format."
          },
          {
            "in": "query",
            "name": "to",
            "schema": {
              "type": "string"
            },
            "example": "2018-01-25T12:00:00",
            "description": "Latest date of the events that should be removed. Can be either a date or datetime in ISO format."
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexRemove"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          }
        }
      }
    },
    "/logs/{index}/tops": {
      "get": {
        "tags": [
          "Indices"
        ],
        "summary": "Get top metrics for an index",
        "description": "Get top metrics for an index.",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "index",
            "schema": {
              "type": "string",
              "example": "univ-foobar"
            },
            "description": "The index to get tops from.",
            "required": true
          },
          {
            "in": "query",
            "name": "period",
            "description": "The time span covered.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "today",
                "yesterday",
                "current_week",
                "last_week",
                "current_month",
                "last_month",
                "current_year",
                "last_year",
                "all"
              ]
            }
          },
          {
            "in": "query",
            "name": "size",
            "description": "The size of the tops.",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 50,
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metrics"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/logs/{index}/search": {
      "post": {
        "tags": [
          "Indices"
        ],
        "summary": "Search in indices",
        "description": "Perform search in indices using Elasticsearch Search API.",
        "security": [{ "bearerAuth": [] }],
        "externalDocs": {
          "description": "More about Elasticsearch Query DSL and aggregations can be found on",
          "url": "https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html"
        },
        "parameters": [
          {
            "in": "path",
            "name": "index",
            "schema": {
              "type": "string",
              "example": "univ-foobar"
            },
            "description": "the index to search",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Elasticsearch query",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "example": {
                  "size": 0,
                  "query": {
                    "term" : { "platform" : "npg" }
                  },
                  "aggs" : {
                    "rtypes" : {
                      "terms" : {
                        "field" : "rtype",
                        "size": 5
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/logs/{index}/aggregation.{extension}": {
      "get": {
        "tags": [
          "Indices"
        ],
        "summary": "Export all aggregated combinations of the given fields",
        "description": "Export all aggregated combinations of the given fields",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "index",
            "schema": {
              "type": "string",
              "example": "univ-foobar"
            },
            "description": "the index that contains the consultations to be aggregated",
            "required": true
          },
          {
            "in": "path",
            "name": "extension",
            "schema": {
              "type": "string",
              "enum": ["csv", "ndjson"]
            },
            "description": "the export format",
            "required": true
          },
          {
            "in": "query",
            "name": "fields",
            "description": "comma-separated list of fields that should be aggregated",
            "schema": {
              "type": "string",
              "example": "rtype,mime"
            }
          },
          {
            "in": "query",
            "name": "missing",
            "description": "Include combinations with missing values",
            "schema": {
              "type": "boolean",
              "default": true,
              "allowEmptyValue": false
            }
          },
          {
            "in": "query",
            "name": "from",
            "schema": {
              "type": "string",
              "example": "2020-01-01"
            }
          },
          {
            "in": "query",
            "name": "to",
            "schema": {
              "type": "string",
              "example": "2020-12-31"
            }
          },
          {
            "in": "query",
            "name": "platform",
            "description": "filter aggregations for a specific platform",
            "schema": {
              "type": "string",
              "example": "wiley"
            }
          },
          {
            "in": "query",
            "name": "delimiter",
            "description": "Delimiter for the CSV output. Use 'tab' to get tab-seperated values.",
            "schema": {
              "type": "string",
              "example": ","
            }
          }
        ],
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "200": {
            "description": "200 response",
            "content": {
              "application/x-ndjson": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "doc_count": {
                      "type": "integer"
                    },
                    "key": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    }
                  },
                  "example": "{ \"key\": { \"rtype\": \"ARTICLE\", \"mime\": \"PDF\" }, \"doc_count\": 42 }\n{ \"key\": { \"rtype\": \"ARTICLE\", \"mime\": \"HTML\" }, \"doc_count\": 17 }"
                }
              },
              "text/csv": {
                "example": "doc_count;rtype;mime\n42;ARTICLE;PDF\n17;ARTICLE;HTML"
              }
            }
          }
        }
      }
    },
    "/logs/{index}/counterize": {
      "post": {
        "tags": [
          "Indices"
        ],
        "summary": "Export aggregated COUNTER metrics into another index",
        "description": "Export aggregated COUNTER metrics into another index",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "index",
            "schema": {
              "type": "string",
              "example": "univ-foobar"
            },
            "description": "the index that contains the consultations to be aggregated",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "destination"
                ],
                "properties": {
                  "destination": {
                    "type": "string",
                    "description": "The index where aggregations should be stored",
                    "example": "univ-foobar-counter5"
                  },
                  "from": {
                    "type": "string",
                    "example": "2020-01"
                  },
                  "to": {
                    "type": "string",
                    "example": "2020-04"
                  },
                  "platform": {
                    "type": "string",
                    "description": "filter aggregations for a specific platform",
                    "example": "wiley"
                  },
                  "sessionField": {
                    "type": "string",
                    "description": "The field that holds the session ID, for unique request/investigation counting",
                    "example": "ezproxy-session"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndexInsert"
                }
              }
            }
          }
        }
      }
    },
    "/files": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "List your hosted files",
        "description": "List your hosted files.",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileList"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/files/{filename}": {
      "delete": {
        "tags": [
          "Files"
        ],
        "summary": "Remove one file from your hosted files",
        "description": "Remove one file from your hosted files.",
        "security": [{ "bearerAuth": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "filename",
            "schema": {
              "type": "string",
              "example": "univ-foobar_2017-08-17.csv"
            },
            "description": "The file to be removed.",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "File successfully removed"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/files/delete_batch": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Remove a list of files from your hosted files",
        "description": "Remove a list of files from your hosted files.",
        "security": [{ "bearerAuth": [] }],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "entries": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "univ-foobar_2017-08-17.csv"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "List of files successfully removed"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "summary": "Get general metrics",
        "description": "Get general metrics about the data hosted on ezMESURE.",
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Metrics"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/partners": {
      "get": {
        "tags": [
          "Depositors"
        ],
        "summary": "Get depositors",
        "description": "Get a list of our depositors.",
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Depositors"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/partners/refresh": {
      "post": {
        "tags": [
          "Depositors"
        ],
        "summary": "Refresh depositors",
        "description": "Refresh depositors.",
        "security": [{ "bearerAuth": [] }],
        "responses": {
          "200": {
            "description": "200 response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositorsRefresh"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    }
  }
}
